buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.4.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.8.10"
    }
}

apply plugin: 'com.android.library'
apply plugin: 'org.jetbrains.kotlin.android'

def safeExtGet(prop, fallback) {
    rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}

android {
    compileSdkVersion safeExtGet('compileSdkVersion', 28)
    buildToolsVersion safeExtGet('buildToolsVersion', '28.0.3')

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    def agpVersion = com.android.Version.ANDROID_GRADLE_PLUGIN_VERSION
    defaultConfig {
        minSdkVersion safeExtGet('minSdkVersion', 16)
        targetSdkVersion safeExtGet('targetSdkVersion', 28)
        versionCode 1
        versionName "1.0"
    }
}

dependencies {

    // All support libs must use the same version
    implementation 'androidx.work:work-runtime:2.7.1'
    implementation "androidx.localbroadcastmanager:localbroadcastmanager:1.1.0"
    implementation "com.github.bumptech.glide:glide:4.13.2"

//    implementation 'com.github.lovegaoshi:KotlinAudio:v2.0.0-rc7-podverse-13'


    implementation "com.facebook.react:react-native:+"

    // Make sure we're using androidx
    implementation "androidx.core:core-ktx:1.7.0"
    implementation "androidx.localbroadcastmanager:localbroadcastmanager:1.1.0"
    implementation "androidx.lifecycle:lifecycle-process:2.6.1"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.3"
    implementation 'androidx.media:media:1.6.0'






    implementation 'io.coil-kt:coil:1.4.0'
    implementation 'androidx.media:media:1.6.0'
    api 'com.google.android.exoplayer:exoplayer:2.18.1'
    api 'com.google.android.exoplayer:extension-mediasession:2.18.1'
    api 'com.jakewharton.timber:timber:5.0.1'

    implementation 'androidx.test:rules:1.4.0'

    // Asynchronous Testing
    androidTestImplementation('org.awaitility:awaitility:4.2.0') {
        transitive = false
    }
    androidTestImplementation('org.awaitility:awaitility-kotlin:4.2.0') {
        transitive = false
    }

    // (Required) Writing and executing Unit Tests on the JUnit Platform
    androidTestImplementation("androidx.test:runner:1.4.0")
    androidTestImplementation("org.junit.jupiter:junit-jupiter-api:5.8.2")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.8.2")

    // (Optional) If you need "Parameterized Tests"
    testImplementation("org.junit.jupiter:junit-jupiter-params:5.8.2")

    // The instrumentation test companion libraries
    androidTestImplementation("de.mannodermaus.junit5:android-test-core:1.3.0")
    androidTestRuntimeOnly("de.mannodermaus.junit5:android-test-runner:1.3.0")

}
